<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aufgabenmanagement-Tool</title>
</head>
<div class="overlay">
    <div class="overlay__inner" id="loader">
        <div class="overlay__content"><span class="spinner"></span></div>
    </div>
    <div class="container">
        <div class="spalte">
            <h2>TODO</h2>
            <div id="spalte-0">
            </div>
        </div>
        <div class="spalte">
            <h2>Wird bearbeitet</h2>
            <div id="spalte-1">
            </div>
        </div>
        <div class="spalte">
            <h2>Wird noch getestet</h2>
            <div id="spalte-2">
            </div>
        </div>
        <div class="spalte">
            <h2>Fertig</h2>
            <div id="spalte-3">
            </div>
        </div>
    </div>
    <div id="neu-unten">
        <button id="neu" class="button-style">Neu</button>
    </div>
    <div id="neu-mitte">
        <form action="/add" method="post">
            <input type="text" placeholder="Titel" name="title" id="titleAdd">
            <textarea type="text" placeholder="Text" name="text" id="textAdd"></textarea>
            <input type="text" placeholder="Person" name="title" id="personAdd">
            <div class="buttons">
                <button id="actually-neu" class="button-style">Ok</button>
                <button id="abbruch" class="button-style">Abbruch</button>
            </div>
        </form>
    </div>
</div>
</body>
<script>
    async function postData(url = "", data = {}) {
        const response = await fetch(url, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify(data)
        });
        return response.json();
    }

    async function getData(url = "") {
        const response = await fetch(url);
        return response.json();
    }

    async function getAufgaben() {
        const aufgaben = await getData("/tickets");

        aufgaben.forEach((e) => {
            const div = document.createElement("div");
            div.classList.add("aufgabe");

            div.aufgabenId = e.id;

            const p0 = document.createElement("p");
            p0.innerHTML = e.title;
            p0.classList.add("title");

            const p1 = document.createElement("p");
            p1.innerHTML = e.text;
            p1.classList.add("text");

            const p2 = document.createElement("p");
            p2.innerHTML = e.person;
            p2.classList.add("person");

            const loeschen = document.createElement("button");
            loeschen.classList.add("button-style")
            loeschen.classList.add("loeschen")
            loeschen.innerHTML = "LÃ¶schen"
            loeschen.addEventListener("click", async (event) => {
                event.preventDefault();

                await getData(`/delete/${e.id}`);

                location.href = "/";
            });

            div.appendChild(p0);
            div.appendChild(p1);
            div.appendChild(p2);
            div.appendChild(loeschen);

            document.querySelector(`#spalte-${e.sort}`).appendChild(div);

            let element = document.getElementById("loader");
            console.log(element)
            element.classList.add("noDisplay");
        })
    }

    getAufgaben();

    document.querySelector("#neu").addEventListener("click", (e) => {
        e.preventDefault();
        document.querySelector("#neu-mitte").style = "display: flex;"
    })

    document.querySelector("#abbruch").addEventListener("click", (e) => {
        e.preventDefault();
        document.querySelector("#neu-mitte").style = "display: none;"
    })

    document.querySelector("#actually-neu").addEventListener("click", (e) => neu(e));

    async function neu(e) {
        e.preventDefault();

        await postData("/add", {
            title: document.querySelector("#titleAdd").value,
            text: document.querySelector("#textAdd").value,
            sort: 0,
            person: document.querySelector("#personAdd").value
        });

        location.href = "/";
    }

    async function change(e) {
        e.preventDefault();

        await postData("/update", {
            title: document.querySelector("#titleAdd").value,
            text: document.querySelector("#textAdd").value,
            sort: 0,
            person: document.querySelector("#personAdd").value,
            id: 1
        });

        location.href = "/";
    }

    async function loeschen(e) {
        e.preventDefault();

        await getData(`/delete/${this.aufgabenId}`);

        location.href = "/";
    }

</script>
<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    /* General layout styles */
    .container {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        height: calc(100vh - 3em);
        gap: 0.3em;
        overflow-y: auto;
    }

    .spalte {
        background-color: #f0f0f0;
        border-radius: 0.5em;
        padding: 1em;
    }

    .spalte > h2 {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 0.5em;
    }

    /* Task box styles */
    .aufgabe {
        padding: 1em;
        background-color: #fff;
        margin-bottom: 0.3em;
        border-radius: 0.5em;
    }

    .title {
        font-size: 1.5em;
        font-weight: 700;
        margin-bottom: 0.3em;
    }

    .text {
        margin-bottom: 0.5em;
    }

    .person {
        font-style: italic;
        color: #555;
    }

    .delete-button {
        padding: 0.3em 0.5em;
        border-radius: 0.5em;
        background-color: #ff5c5c;
        color: white;
        border: none;
        cursor: pointer;
    }

    /* New task form styles */
    #neu-mitte {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
    }

    form {
        display: flex;
        flex-direction: column;
        gap: 0.5em;
        padding: 2em;
        border-radius: 1em;
        background-color: #f4f4f4;
        max-width: 400px;
        width: 80%;
    }

    .buttons {
        display: flex;
        justify-content: space-around;
    }

    .button-style {
        margin-top: 10px;
        padding: 0.5em 1em;
        border-radius: 0.5em;
        cursor: pointer;
        border: none;
    }

    .overlay {
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        position: fixed;
    }

    .overlay__inner {
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        position: absolute;
    }

    .overlay__content {
        left: 50%;
        position: absolute;
        top: 50%;
        transform: translate(-50%, -50%);
    }

    .spinner {
        width: 150px;
        height: 150px;
        display: inline-block;
        border-width: 2px;
        border-color: rgba(255, 255, 255, 0.05);
        border-top-color: #000000;
        animation: spin 1s infinite linear;
        border-radius: 100%;
        border-style: solid;
    }

    @keyframes spin {
        100% {
            transform: rotate(360deg);
        }
    }

    .noDisplay {
        display: none;
    }
</style>
</html>